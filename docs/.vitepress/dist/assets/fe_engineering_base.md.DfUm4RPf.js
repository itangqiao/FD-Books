import{_ as l,c as i,o as e,a4 as a}from"./chunks/framework.axffzhAD.js";const b=JSON.parse('{"title":"基础框架","description":"","frontmatter":{},"headers":[],"relativePath":"fe/engineering/base.md","filePath":"fe/engineering/base.md"}'),t={name:"fe/engineering/base.md"},r=a('<h1 id="基础框架" tabindex="-1">基础框架 <a class="header-anchor" href="#基础框架" aria-label="Permalink to &quot;基础框架&quot;">​</a></h1><ul><li><h3 id="技术选型" tabindex="-1">技术选型 <a class="header-anchor" href="#技术选型" aria-label="Permalink to &quot;技术选型&quot;">​</a></h3><ul><li>框架</li></ul></li><li><h3 id="统一规范-eslint-prettier-husky-commitlint" tabindex="-1">统一规范 <code>eslint + prettier + husky + commitlint</code> <a class="header-anchor" href="#统一规范-eslint-prettier-husky-commitlint" aria-label="Permalink to &quot;统一规范 `eslint + prettier + husky + commitlint`&quot;">​</a></h3><ul><li>代码 <ul><li>[[eslint+prettier]]</li></ul></li><li>git <ul><li>[[husky]]</li></ul></li><li>项目 <ul><li>文件组织</li><li>命名方式</li></ul></li><li>UI</li></ul></li><li><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><ul><li>单元测试</li><li>TDD 测试驱动开发 <ul><li>TDD 就是根据需求提前把测试代码写好，然后根据测试代码实现功能。</li></ul></li></ul></li><li><h3 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h3><ul><li>CICD</li></ul></li><li><h3 id="监控" tabindex="-1">监控 <a class="header-anchor" href="#监控" aria-label="Permalink to &quot;监控&quot;">​</a></h3><ul><li>错误监控</li><li>性能监控</li><li>用户信息收集</li><li>数据上报</li></ul></li><li><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><ul><li>手动检查</li><li>工具检查</li></ul></li><li><h3 id="重构" tabindex="-1">重构 <a class="header-anchor" href="#重构" aria-label="Permalink to &quot;重构&quot;">​</a></h3><ul><li>过三，提取重复代码，封装为函数。</li><li>拆分太长、功能过多的函数</li></ul></li></ul><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p>使用 <code>simple-git-hooks</code> 作为 <code>git hooks</code> 方案，<code>lint-staged</code> 和 <code>prettier</code> 格式化代码。</p>',4),o=[r];function n(h,s,u,c,d,m){return e(),i("div",null,o)}const f=l(t,[["render",n]]);export{b as __pageData,f as default};
